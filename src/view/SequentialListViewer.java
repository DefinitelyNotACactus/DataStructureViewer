package view;

import java.awt.Color;
import java.awt.Container;
import java.awt.GridLayout;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import javax.swing.JFileChooser;
import javax.swing.JScrollPane;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.filechooser.FileSystemView;
import structures.SequentialList;

public class SequentialListViewer extends JPanel {

    private SequentialList<Integer> list;
    /**
     * Creates new form SequentialList
     */
    public SequentialListViewer() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btLoad = new javax.swing.JButton();
        btSave = new javax.swing.JButton();
        optionsPanel = new javax.swing.JPanel();
        btNew = new javax.swing.JButton();
        operationsPanel = new javax.swing.JPanel();
        btAdd = new javax.swing.JButton();
        btModify = new javax.swing.JButton();
        btRemove = new javax.swing.JButton();
        btSearch = new javax.swing.JButton();
        scrollPane = new JScrollPane();
        statusLabel = new javax.swing.JLabel();

        btLoad.setText(Constants.PORTUGUESE ? Constants.LIST_PT[1] : "Load");
        btLoad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btLoadActionPerformed(evt);
            }
        });

        btSave.setText(Constants.PORTUGUESE ? Constants.LIST_PT[2] : "Save");
        btSave.setToolTipText("");
        btSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSaveActionPerformed(evt);
            }
        });

        optionsPanel.setLayout(new java.awt.GridLayout(1, 0, 5, 0));

        btNew.setText(Constants.PORTUGUESE ? Constants.LIST_PT[0] : "New List");
        btNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btNewActionPerformed(evt);
            }
        });
        optionsPanel.add(btNew);

        operationsPanel.setLayout(new java.awt.GridLayout(1, 0, 5, 0));

        btAdd.setText(Constants.PORTUGUESE ? Constants.LIST_PT[3] : "Add");
        btAdd.setEnabled(false);
        btAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btAddActionPerformed(evt);
            }
        });
        operationsPanel.add(btAdd);

        btModify.setText(Constants.PORTUGUESE ? Constants.LIST_PT[4] : "Modify");
        btModify.setEnabled(false);
        btModify.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btModifyActionPerformed(evt);
            }
        });
        operationsPanel.add(btModify);

        btRemove.setText(Constants.PORTUGUESE ? Constants.LIST_PT[5] : "Remove");
        btRemove.setEnabled(false);
        btRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btRemoveActionPerformed(evt);
            }
        });
        operationsPanel.add(btRemove);

        btSearch.setText(Constants.PORTUGUESE ? Constants.LIST_PT[6] : "Search");
        btSearch.setEnabled(false);
        btSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSearchActionPerformed(evt);
            }
        });
        operationsPanel.add(btSearch);

        scrollPane.setToolTipText("");
        scrollPane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        statusLabel.setText(Constants.PORTUGUESE ? Constants.LIST_PT[7] : "Empty");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(optionsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(operationsPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 780, Short.MAX_VALUE)
                    .addComponent(statusLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(scrollPane, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 780, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(optionsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(operationsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(statusLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btNewActionPerformed
        try{
            String input = JOptionPane.showInputDialog(this, Constants.PORTUGUESE ? Constants.LIST_PT[8] : "Insert the list maximum size (Type 0 for default size)", "Info", JOptionPane.QUESTION_MESSAGE);
            if(input == null){
                return;
            }
            int size = Integer.parseInt(input);
            if(size == 0){
                list = new SequentialList<>();
            } else if(size > 0){
                list = new SequentialList<>(this, size);
            } else {
                throw new NumberFormatException();
            }
            loadList();
        } catch(NumberFormatException ex){
            //ex.printStackTrace();
            JOptionPane.showMessageDialog(this, Constants.PORTUGUESE ? Constants.ERRORS_PT[0] : "Size must be a positive integer!", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btNewActionPerformed

    private void btAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btAddActionPerformed
        int value = 0, position = 0, selection;
        String options[] = {Constants.PORTUGUESE ? Constants.LIST_PT[11] : "Beginning", Constants.PORTUGUESE ? Constants.LIST_PT[12] : "End", Constants.PORTUGUESE ? Constants.LIST_PT[13] : "In a given position", Constants.PORTUGUESE ? Constants.LIST_PT[14] : "Cancel"}, input;
        selection = JOptionPane.showOptionDialog(this, Constants.PORTUGUESE ? Constants.LIST_PT[15] : "Where you would like to add an element:", "Info", JOptionPane.DEFAULT_OPTION, JOptionPane.QUESTION_MESSAGE, null, options, options[0]);
        if(selection >= 0 && selection <= 2){
            try{
                input = JOptionPane.showInputDialog(this, Constants.PORTUGUESE ? Constants.LIST_PT[16] : "Insert the value", "Info", JOptionPane.QUESTION_MESSAGE);
                if(input == null){
                    return;
                }
                value = Integer.parseInt(input);
            } catch(NumberFormatException ex){
                JOptionPane.showMessageDialog(this, Constants.PORTUGUESE ? Constants.ERRORS_PT[1] : "Value must be a integer!", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            switch(selection){
                case 0://first
                    position = 1;
                    break;
                case 1://last
                    position = list.getSize()+1;
                    break;
                case 2://x position
                    try{
                        input = JOptionPane.showInputDialog(this, (Constants.PORTUGUESE ? Constants.LIST_PT[17] : "Insert the position where you would like to add ") + value, "Info", JOptionPane.QUESTION_MESSAGE);
                        if(input == null){
                            return;
                        }
                        position = Integer.parseInt(input);
                    } catch(NumberFormatException ex){
                        JOptionPane.showMessageDialog(this, Constants.PORTUGUESE ? Constants.ERRORS_PT[2] : "Position must be a integer!", "Error", JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                    break;
                default:
                    break;
            }
            try{
                listElements(position, true);
                list.addValue(position, value);
            } catch(Exception ex){
                JOptionPane.showMessageDialog(this, ex.getMessage(), "Info", JOptionPane.WARNING_MESSAGE);
            }
        }
    }//GEN-LAST:event_btAddActionPerformed

    private void btSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSearchActionPerformed
        int selection;
        String options[] = {Constants.PORTUGUESE ? Constants.LIST_PT[18] : "By Value", Constants.PORTUGUESE ? Constants.LIST_PT[19] : "By Position", Constants.PORTUGUESE ? Constants.LIST_PT[20] : "Cancel"}, input;
        selection = JOptionPane.showOptionDialog(this, Constants.PORTUGUESE ? Constants.LIST_PT[21] : "How you would like to search the list", "Info", JOptionPane.DEFAULT_OPTION, JOptionPane.QUESTION_MESSAGE, null, options, options[0]);
        switch(selection){
            case 0://search by value
                try{
                    input = JOptionPane.showInputDialog(this, Constants.PORTUGUESE ? Constants.LIST_PT[22] : "Insert the value to search for:", "Info", JOptionPane.QUESTION_MESSAGE);
                    if(input == null){
                        return;
                    }
                    int value = Integer.parseInt(input);
                    try{
                        list.getPositionByValue(value);
                        listElements(value, false);
                    }catch(Exception ex){
                        JOptionPane.showMessageDialog(this, ex.getMessage(), "Info", JOptionPane.WARNING_MESSAGE);
                    }
                }catch(NumberFormatException ex){
                    JOptionPane.showMessageDialog(this, Constants.PORTUGUESE ? Constants.ERRORS_PT[1] : "Value must be a integer!", "Error", JOptionPane.ERROR_MESSAGE);
                }
                break;
            case 1://search by position
                try{
                    input = JOptionPane.showInputDialog(this, Constants.PORTUGUESE ? Constants.LIST_PT[23] : "Insert the position to search for:", "Info", JOptionPane.QUESTION_MESSAGE);
                    if(input == null){
                        return;
                    }
                    int position = Integer.parseInt(input);
                    try{
                        list.getValueAtPosition(position);
                        JOptionPane.showMessageDialog(this, new Element(""+ list.getValueAtPosition(position)), (Constants.PORTUGUESE ? Constants.LIST_PT[24] : "Value at position ") + position, JOptionPane.PLAIN_MESSAGE);
                        listElements(position, true);
                    }catch(Exception ex){
                        JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                    }                
                }catch(NumberFormatException ex){
                    JOptionPane.showMessageDialog(this, Constants.PORTUGUESE ? Constants.ERRORS_PT[2] : "Position must be a integer!", "Error", JOptionPane.ERROR_MESSAGE);
                }
                break;
            default:
                break;
        } 
    }//GEN-LAST:event_btSearchActionPerformed

    private void btRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btRemoveActionPerformed
        int position = 0, selection;
        String options[] = {"Remove by position", "Remove by element", "Cancel"}, input;
        selection = JOptionPane.showOptionDialog(this, "How you would like to remove an element", "Info", JOptionPane.DEFAULT_OPTION, JOptionPane.QUESTION_MESSAGE, null, options, options[0]);
        if(selection >= 0 && selection <= 2){
            switch(selection){
                case 0://remove by position
                    try {
                        input = JOptionPane.showInputDialog(this, "Insert the position:", "Info", JOptionPane.QUESTION_MESSAGE);
                        if(input == null){
                            return;
                        }
                        position = Integer.parseInt(input);
                        try{
                            list.remove(position);
                            //JOptionPane.showMessageDialog(this, "" + value + " was removed from the list!");
                        }catch(Exception ex){
                            JOptionPane.showMessageDialog(this, ex.getMessage(), "Info", JOptionPane.WARNING_MESSAGE);
                        }
                    }catch(NumberFormatException ex){
                        JOptionPane.showMessageDialog(this, Constants.PORTUGUESE ? Constants.ERRORS_PT[2] : "Position must be a integer!", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                    break;
                case 1://remove by element
                    try {
                        input = JOptionPane.showInputDialog(this, "Type the element to be removed from the list:", "Info", JOptionPane.QUESTION_MESSAGE);
                        if(input == null){
                            return;
                        }
                        Integer value = Integer.parseInt(input);
                        try{
                            list.remove(value);
                            //JOptionPane.showMessageDialog(this, "" + value + " was removed from the list at position " + position);
                        }catch(Exception ex){
                            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                        }
                    }catch(NumberFormatException ex){
                        JOptionPane.showMessageDialog(this, Constants.PORTUGUESE ? Constants.ERRORS_PT[3] : "The element must be a integer!", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                    break;
                default:
                    break;
            }         
        }
        //listElements();
    }//GEN-LAST:event_btRemoveActionPerformed

    private void btModifyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btModifyActionPerformed
        try{
            String input = JOptionPane.showInputDialog(this, "Type the position you would like to change:", "Info", JOptionPane.QUESTION_MESSAGE);
            if(input == null){
                return;
            }
            int pos = Integer.parseInt(input);
            if(!list.isValidPosition(pos)){
                throw new Exception();
            } else {
                input = JOptionPane.showInputDialog(this, "Insert the new value for position " + pos + " : ", "Info", JOptionPane.QUESTION_MESSAGE);
                int newValue = Integer.parseInt(input);
                list.setValueAtPosition(pos, newValue);
                listElements(pos, true);
            }
        } catch (NumberFormatException ex){
            JOptionPane.showMessageDialog(this, Constants.PORTUGUESE ? Constants.ERRORS_PT[4] : "The position and value must be a integer!", "Error", JOptionPane.ERROR_MESSAGE);
        } catch (Exception ex){
            
        }
    }//GEN-LAST:event_btModifyActionPerformed

    private void btLoadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btLoadActionPerformed
        JFileChooser fc = new JFileChooser(FileSystemView.getFileSystemView().getHomeDirectory()); 
        FileFilter filter = new FileNameExtensionFilter("Sequential List (.list)", "list");
        fc.setFileFilter(filter);
        int returnVal = fc.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            try (FileInputStream fileIn = new FileInputStream(fc.getSelectedFile().getAbsolutePath()); ObjectInputStream in = new ObjectInputStream(fileIn)) {
                list = (SequentialList) in.readObject();
                loadList();
            } catch (IOException | ClassNotFoundException ex) {
                JOptionPane.showMessageDialog(this, Constants.PORTUGUESE ? Constants.ERRORS_PT[5] : "The selected file is not a valid sequential list!", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_btLoadActionPerformed

    private void btSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSaveActionPerformed
        if(list != null){        
            JFileChooser fc = new JFileChooser(FileSystemView.getFileSystemView().getHomeDirectory()); 
            fc.setDialogTitle("Choose a directory to save your list");
            fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
            int returnVal = fc.showSaveDialog(this);
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                try (FileOutputStream fileOut = new FileOutputStream(fc.getSelectedFile().getAbsolutePath() + "MyList.list"); ObjectOutputStream out = new ObjectOutputStream(fileOut)) {
                    out.writeObject(list);
                } catch (IOException ex) {
                    JOptionPane.showMessageDialog(this, Constants.PORTUGUESE ? Constants.ERRORS_PT[6] : "Unknown error", "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, Constants.PORTUGUESE ? "Lista Nula" : "Null list", "Error", JOptionPane.ERROR_MESSAGE);
        } 
    }//GEN-LAST:event_btSaveActionPerformed
   
    public void listElements(){
        Container cont = new Container();
        Element element;
        for(int i = 1; i <= list.getMaxSize(); i++){
            try {
                element = new Element("" + list.getValueAtPosition(i));
                element.setToolTipText("Position " + i);
                cont.add(element);
            }catch(Exception ex){
                element = new Element("null");
                element.setToolTipText("Position " + i);
                cont.add(element);
            }
        }     
        cont.setLayout(new GridLayout());
        int sValue = scrollPane.getHorizontalScrollBar().getValue();
        scrollPane.getViewport().setView(cont);
        scrollPane.getHorizontalScrollBar().setValue(sValue);
        statusLabel.setText((Constants.PORTUGUESE ? Constants.LIST_PT[9] : "Current Size: " )+ list.getSize() + (Constants.PORTUGUESE ? Constants.LIST_PT[10] : "         Maximum Size: " )+ list.getMaxSize());
    }
    
    public void listElements(int number, boolean position){
        Container cont = new Container();
        for(int i = 1; i <= list.getMaxSize(); i++){
            Element element;
            try {
                int value = list.getValueAtPosition(i);
                element = new Element("" + value);
                element.setToolTipText("Position " + i);
                cont.add(element);
                if(position){
                    if(i == number){
                        element.setBorderColor(Color.yellow);
                    }
                } else {
                    if(value == number){
                        element.setBorderColor(Color.yellow);
                    }
                }
            }catch(Exception ex){
                element = new Element("null");
                element.setToolTipText("Position " + i);
                cont.add(element);
            }
            cont.add(element);
        }     
        cont.setLayout(new GridLayout());
        int sValue = scrollPane.getHorizontalScrollBar().getValue();
        scrollPane.getViewport().setView(cont);
        scrollPane.getHorizontalScrollBar().setValue(sValue);
        statusLabel.setText((Constants.PORTUGUESE ? Constants.LIST_PT[9] : "Current Size: " )+ list.getSize() + (Constants.PORTUGUESE ? Constants.LIST_PT[10] : "         Maximum Size: " )+ list.getMaxSize());
    }
    
    private void loadList(){
        listElements();
        statusLabel.setText((Constants.PORTUGUESE ? Constants.LIST_PT[9] : "Current Size: " )+ list.getSize() + (Constants.PORTUGUESE ? Constants.LIST_PT[10] : "         Maximum Size: " )+ list.getMaxSize());
        btAdd.setEnabled(true);
        btModify.setEnabled(true);
        btRemove.setEnabled(true);
        btSearch.setEnabled(true);
        revalidate();
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btAdd;
    private javax.swing.JButton btLoad;
    private javax.swing.JButton btModify;
    private javax.swing.JButton btNew;
    private javax.swing.JButton btRemove;
    private javax.swing.JButton btSave;
    private javax.swing.JButton btSearch;
    private javax.swing.JPanel operationsPanel;
    private javax.swing.JPanel optionsPanel;
    private javax.swing.JScrollPane scrollPane;
    private javax.swing.JLabel statusLabel;
    // End of variables declaration//GEN-END:variables
}
