/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import java.awt.Container;
import java.awt.GridLayout;
import javax.swing.JScrollPane;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import structures.SequentialList;

public class SequentialListViewer extends JPanel {

    private SequentialList<Integer> list;
    /**
     * Creates new form SequentialList
     */
    public SequentialListViewer() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btCreate = new javax.swing.JButton();
        btLoad = new javax.swing.JButton();
        btSave = new javax.swing.JButton();
        optionsPanel = new javax.swing.JPanel();
        operationsPanel = new javax.swing.JPanel();
        btAdd = new javax.swing.JButton();
        btRemove = new javax.swing.JButton();
        btSearch = new javax.swing.JButton();
        scrollPane = new JScrollPane();
        statusLabel = new javax.swing.JLabel();

        btCreate.setText("Create List");
        btCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btCreateActionPerformed(evt);
            }
        });

        btLoad.setText("Load");
        btLoad.setEnabled(false);

        btSave.setText("Save");
        btSave.setToolTipText("");
        btSave.setEnabled(false);

        optionsPanel.setLayout(new java.awt.GridLayout(1, 0, 5, 0));
        optionsPanel.add(btCreate);
        optionsPanel.add(btLoad);

        operationsPanel.setLayout(new java.awt.GridLayout(1, 0, 5, 0));

        btAdd.setText("Add");
        btAdd.setEnabled(false);
        btAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btAddActionPerformed(evt);
            }
        });
        operationsPanel.add(btAdd);

        btRemove.setText("Remove");
        btRemove.setEnabled(false);
        btRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btRemoveActionPerformed(evt);
            }
        });
        operationsPanel.add(btRemove);

        btSearch.setText("Search");
        btSearch.setEnabled(false);
        btSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSearchActionPerformed(evt);
            }
        });
        operationsPanel.add(btSearch);

        scrollPane.setToolTipText("");
        scrollPane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        statusLabel.setText("Empty");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(scrollPane)
                    .addComponent(optionsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(operationsPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 780, Short.MAX_VALUE)
                    .addComponent(statusLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(optionsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(operationsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(statusLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btCreateActionPerformed
        try{
            int size = Integer.parseInt(JOptionPane.showInputDialog(this, "Insert the list maximum size (Leave 0 for default size)", "Info", JOptionPane.QUESTION_MESSAGE));
            if(size == 0){
                list = new SequentialList<>();
            } else {
                list = new SequentialList<>(size);
            }
            optionsPanel.remove(btCreate);
            optionsPanel.add(btSave);
            optionsPanel.revalidate();
            listElements();
            statusLabel.setText("Current Size: " + list.getSize() + "         Maximum Size: " + list.getMaxSize());
            btAdd.setEnabled(true);
            btRemove.setEnabled(true);
            btSearch.setEnabled(true);
            revalidate();
        } catch(NumberFormatException ex){
            //ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Size must be a positive integer!", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btCreateActionPerformed

    private void btAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btAddActionPerformed
        int value = 0, position = 0, selection;
        String options[] = {"Beginning", "Ending", "In a given position", "Cancel"};
        selection = JOptionPane.showOptionDialog(this, "Where you would like to add an element", "Info", JOptionPane.DEFAULT_OPTION, JOptionPane.QUESTION_MESSAGE, null, options, options[0]);
        if(selection >= 0 && selection <= 2){
            try{
                value = Integer.parseInt(JOptionPane.showInputDialog(this, "Insert the value", "Info", JOptionPane.QUESTION_MESSAGE));
            } catch(NumberFormatException ex){
                JOptionPane.showMessageDialog(this, "Value must be a integer!", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            switch(selection){
                case 0://first
                    position = 1;
                    break;
                case 1://last
                    position = list.getSize()+1;
                    break;
                case 2://x position
                    try{
                        position = Integer.parseInt(JOptionPane.showInputDialog(this, "<html>Insert the position where you would like to add <b>" + value + "</b></html>", "Info", JOptionPane.QUESTION_MESSAGE));
                    } catch(NumberFormatException ex){
                        JOptionPane.showMessageDialog(this, "Position must be a integer!", "Error", JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                    break;
                default:
                    break;
            }
            if(!list.setValueAtPosition(position, value)){
                JOptionPane.showMessageDialog(this, "Invalid position or the list is full!", "Info", JOptionPane.PLAIN_MESSAGE);
            }
        }
        listElements();
    }//GEN-LAST:event_btAddActionPerformed

    private void btSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSearchActionPerformed
        try{
            int position = Integer.parseInt(JOptionPane.showInputDialog(this, "Type the position to search for:", "Info", JOptionPane.QUESTION_MESSAGE));
            if(list.getValueAtPosition(position) != null){
                JOptionPane.showMessageDialog(this, new Element(""+ list.getValueAtPosition(position)), "Info", JOptionPane.PLAIN_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(this, "Invalid position!", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }catch(NumberFormatException ex){
            JOptionPane.showMessageDialog(this, "Position must be a integer!", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btSearchActionPerformed

    private void btRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btRemoveActionPerformed
        int position = 0, selection;
        String options[] = {"Beginning", "Ending", "In a given position", "Cancel"};
        selection = JOptionPane.showOptionDialog(this, "Where you would like to remove an element", "Info", JOptionPane.DEFAULT_OPTION, JOptionPane.QUESTION_MESSAGE, null, options, options[0]);
        if(selection >= 0 && selection <= 2){
            switch(selection){
                case 0://first
                    position = 1;
                    break;
                case 1://last
                    position = list.getSize();
                    break;
                case 2://x position 
                    try {
                        position = Integer.parseInt(JOptionPane.showInputDialog(this, "Where do you would like to remove a element?", "Info", JOptionPane.QUESTION_MESSAGE));
                    }catch(NumberFormatException ex){
                        JOptionPane.showMessageDialog(this, "Position must be a integer!", "Error", JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                    break;
                default:
                    break;
            }
            Integer value = list.remove(position);
            if(value == null){
                JOptionPane.showMessageDialog(this, "Invalid position or the list is empty!", "Info", JOptionPane.PLAIN_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(this, "" + value + " was removed from the list!");
            }
        }
        listElements();
    }//GEN-LAST:event_btRemoveActionPerformed
   
    private void listElements(){
        Container cont = new Container();
        for(int i = 1; i <= list.getMaxSize(); i++){
            Integer value = list.getValueAtPosition(i);
            cont.add(new Element(value == null? "null" : "" + value));
        }     
        cont.setLayout(new GridLayout());
        scrollPane.getViewport().setView(cont);
        statusLabel.setText("Current Size: " + list.getSize() + "         Maximum Size: " + list.getMaxSize());
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btAdd;
    private javax.swing.JButton btCreate;
    private javax.swing.JButton btLoad;
    private javax.swing.JButton btRemove;
    private javax.swing.JButton btSave;
    private javax.swing.JButton btSearch;
    private javax.swing.JPanel operationsPanel;
    private javax.swing.JPanel optionsPanel;
    private javax.swing.JScrollPane scrollPane;
    private javax.swing.JLabel statusLabel;
    // End of variables declaration//GEN-END:variables
}
